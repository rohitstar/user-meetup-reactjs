import { useState, useEffect, useReducer, useCallback } from 'react';
import classes from './FavoritesDetail.module.css';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import { useParams, withRouter } from 'react-router-dom';


function httpReducer(state, action) {
  if (action.type === 'SEND') {
    return {
      data: null,
      error: null,
      status: 'pending',
    };
  }

  if (action.type === 'SUCCESS') {
    return {
      data: action.responseData,
      error: null,
      status: 'completed',
    };
  }

  if (action.type === 'ERROR') {
    return {
      data: null,
      error: action.errorMessage,
      status: 'completed',
    };
  }

  return state;
}

 function useHttp(requestFunction, startWithPending = false) {
  const [httpState, dispatch] = useReducer(httpReducer, {
    status: startWithPending ? 'pending' : null,
    data: null,
    error: null,
  });

  const sendRequest = useCallback(
    async function (requestData) {
      dispatch({ type: 'SEND' });
      try {
        const responseData = await requestFunction(requestData);
        dispatch({ type: 'SUCCESS', responseData });
      } catch (error) {
        dispatch({
          type: 'ERROR',
          errorMessage: error.message || 'Something went wrong!',
        });
      }
    },
    [requestFunction]
  );

  return {
    sendRequest,
    ...httpState,
  };
}

function FavoritesDetail (props) {
  // const [meetupGetData, setMeetupGetData] = useState({});
  const params = useParams();
  // console.log(params);
  const { meetupId } = params;

  const { sendRequest, status, data: loadedMeetup, error } = useHttp(getSingleFavorite, true)
  
  useEffect(() => {
    sendRequest(meetupId);
  },[sendRequest, meetupId]);

  if(loadedMeetup) {
    return <p> No Favorite Data here!!!</p>
  }

  if(status === 'padding') {
    return (
    <div style={{ display: 'flex', justifyContent: 'center' }}>
    <LoadingSpinner />
    </div>
    )
  }
  if(error) {
    return <p style={{ display: 'flex', justifyContent: 'center' }}>{error}</p>
  }

  


  async function getSingleFavorite (meetupId) {
    const response = await fetch(`https://meetup-react-hooks-project-default-rtdb.firebaseio.com/all-meetup/${meetupId}.json`);
    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.message || "Could not fetch favorites data.")
    }

    const loadedMeetup = {
      id: meetupId,
      ...data,
    };

    return loadedMeetup;
  }



//   const fetchFavoriteData = (id) => {

//   }

//   useEffect(() => {
//     const id = props.match.params.id;
// fetchFavoriteData(id);
//   })




  // useEffect(() => {
  //   if (meetupId) {
  //     const getMeetupId = meetupId.filter(meetupData => meetupData.id === Id )[0];
  //     setMeetupGetData({ meetupGetData : getMeetupId });
  //   }
  //   console.log("checkitdata", meetupGetData );
  // })



  // const [loading, setLoading] = useState(true);
  // const [loadedMeetup, setLoadedMeetup] = useState(meetupId);

  // useEffect(() => {
  //   setLoading(true);
  //   fetch(
  //     "https://meetup-react-hooks-project-default-rtdb.firebaseio.com/meetups.json"
  //   )
  //     .then((response) => {
  //       return response.json();
  //     })
  //     .then((data) => {
  //       const meetups = [];
        

  //       // for (const key in data) {
  //       //   const meetup = {
  //       //     id: key,
  //       //     ...data[key],
  //       //   };
  //       //   meetups.filter(data => data === meetup.id)[0];
  //       // }
  //       setLoading(false);
  //       setLoadedMeetup(meetups);
  //     });
  // }, []);

  // if (loading) {
  //   return (
  //     <section>
  //       <div style={{ display: 'flex', justifyContent: 'center' }}>
  //       <LoadingSpinner />
  //       </div>
  //     </section>
  //   );
  // }
      return (
          <figure>
            <div>I m rohit</div>
            <div className={classes.image}>
          <img src={loadedMeetup.image} alt={loadedMeetup.title} />
        </div>
        <div className={classes.content}>
          <h3>{loadedMeetup.title}</h3>
          <address>{loadedMeetup.address}</address>
          <p>{loadedMeetup.description}</p>
        </div>
          </figure>
      )
}

export default withRouter(FavoritesDetail);